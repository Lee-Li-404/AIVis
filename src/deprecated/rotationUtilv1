import * as THREE from "three";
import { rotationGroupings } from "./rotationGroupings.js";

// ✅ Correct face rotation ring map (clockwise when looking at the face)
const faceRotationMap = {
  top: ["front", "right", "back", "left"], // looking down
  bottom: ["front", "left", "back", "right"], // looking up
  left: ["top", "front", "bottom", "back"], // looking at -X
  right: ["top", "back", "bottom", "front"], // looking at +X
  front: ["top", "right", "bottom", "left"], // looking at +Z
  back: ["top", "left", "bottom", "right"], // looking at -Z
};

// ✅ Axis mapping for each face (for visual rotation)
function getAxisForFace(face) {
  switch (face) {
    case "top":
    case "bottom":
      return new THREE.Vector3(0, 1, 0); // Y axis
    case "left":
    case "right":
      return new THREE.Vector3(1, 0, 0); // X axis
    case "front":
    case "back":
      return new THREE.Vector3(0, 0, 1); // Z axis
  }
}

// ✅ Find all group IDs containing this face
function getGroupsForFace(face) {
  return Object.entries(rotationGroupings)
    .filter(([, faces]) => faces.includes(face))
    .map(([id]) => parseInt(id));
}

// ✅ Animate rotation of a face and update groupings after it finishes
export function rotateAnimated(face, direction, angle, groupArray, onComplete) {
  const affectedGroups = getGroupsForFace(face);
  const axis = getAxisForFace(face);
  const steps = 30;
  const delta = ((direction === "clockwise" ? 1 : -1) * angle) / steps;
  let step = 0;

  function animateStep() {
    if (step < steps) {
      for (const groupId of affectedGroups) {
        groupArray[groupId].rotateOnWorldAxis(axis, delta);
      }
      step++;
      requestAnimationFrame(animateStep);
    } else {
      updateGroupLabels(face, direction);
      if (onComplete) onComplete();
    }
  }

  animateStep();
}

// ✅ Update logical face labels in-place while preserving order
function updateGroupLabels(face, direction) {
  const affectedGroups = getGroupsForFace(face);
  const ring = faceRotationMap[face];

  for (const groupId of affectedGroups) {
    const oldFaces = rotationGroupings[groupId];
    const newFaces = [...oldFaces]; // keep the same order

    for (let i = 0; i < oldFaces.length; i++) {
      const f = oldFaces[i];
      if (f === face) continue; // axis face stays unchanged

      const idx = ring.indexOf(f);
      if (idx !== -1) {
        const delta = direction === "clockwise" ? 1 : -1;
        const newIdx = (idx + delta + 4) % 4;
        newFaces[i] = ring[newIdx];
      }
    }

    rotationGroupings[groupId] = newFaces;
  }
}
